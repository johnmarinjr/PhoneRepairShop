using PX.Data;
using System;
using PX.Objects.CS;
using PX.Objects.EP;
using PX.Data.ReferentialIntegrity.Attributes;
using PX.Objects.CT;
using PX.Objects.IN;

namespace PX.Objects.PM
{

	/// Represents the tenant-level project preferences record.
	/// The parameters defined by this record include various numbering sequence settings and document processing options.
	/// The single record of this type is created and edited on the Project Preferences (PM101000) form, 
	/// which corresponds to the <see cref="SetupMaint"/> graph.
	/// </summary>
	/// <remarks>
	/// Particular settings, such as numbering sequences, cannot be changed once the project accounting is in use.
	/// </remarks>
	[System.SerializableAttribute()]
    [PXPrimaryGraph(typeof(SetupMaint))]
    [PXCacheName(Messages.PMSetupMaint)]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	public class PMSetup : PX.Data.IBqlTable
	{
		/// <summary>
		/// The default non-project code, which is X.
		/// </summary>
		public const string DefaultNonProjectCode = "X";

		#region IsActive
		public abstract class isActive : PX.Data.BQL.BqlBool.Field<isActive> { }
		/// <summary>
		/// Specifies (if set to <see langword="true" />) that the Project Accounting feature is enabled.
		/// </summary>
		[PXBool()]
		[PXUIField(Visible=false)]
		public virtual Boolean? IsActive
		{
            get { return PXAccess.FeatureInstalled<FeaturesSet.projectModule>(); }			
		}
		#endregion		
		#region NonProjectCode
		public abstract class nonProjectCode : PX.Data.BQL.BqlString.Field<nonProjectCode> { }
		/// <summary>
		/// The non-project code. 
		/// </summary>
		/// <value>
		/// The default value is X.
		/// </value>
		[PXDefault(DefaultNonProjectCode)]
		[PXDBString(30, IsUnicode = true)]
		[PXUIField(DisplayName = "Non-Project Code")]
		public virtual string NonProjectCode
		{
			get;
			set;
		}
		#endregion
		#region EmptyItemCode
		public abstract class emptyItemCode : PX.Data.BQL.BqlString.Field<emptyItemCode> { }

		/// <summary>
		/// The empty item code. The empty item code is used whenever an inventory item is required but it is unknown or is not applicable.
		/// </summary>
		/// <value>
		/// The default value is N/A.
		/// </value>
		[PXDefault(PMInventorySelectorAttribute.EmptyComponentCD)]
		[PXDBString(30, IsUnicode = true)]
		[PXUIField(DisplayName = "Empty Item Code")]
		public virtual string EmptyItemCode
		{
			get;
			set;
		}
        #endregion
		#region EmptyItemUOM
		public abstract class emptyItemUOM : PX.Data.BQL.BqlString.Field<emptyItemUOM> { }
		/// <summary>
		/// The unit of measure for the empty item.
		/// </summary>
		/// <value>
		/// The default value is HOUR.
		/// </value>
		[PXDBString(6, IsUnicode = true)]
		[PXDefault("HOUR")]
		[PXUIField(DisplayName = "Empty Item UOM")]
		[PXSelector(typeof(Search4<INUnit.fromUnit,
							Where<INUnit.unitType, Equal<INUnitType.global>>,
							Aggregate<GroupBy<INUnit.fromUnit>>>))]
		public virtual string EmptyItemUOM
		{
		    get;
		    set;
		}
		#endregion
		#region TranNumbering
		public abstract class tranNumbering : PX.Data.BQL.BqlString.Field<tranNumbering> { }
		/// <summary>
		/// The numbering sequence that is used for transaction batches generated by the project accounting.
		/// </summary>
		/// <value>
		/// This field is a link to a <see cref="Numbering"/> record.
		/// </value>
		[PXDefault("PMTRAN")]
		[PXDBString(10, IsUnicode = true)]
		[PXSelector(typeof(Numbering.numberingID), DescriptionField = typeof(Numbering.descr))]
        [PXUIField(DisplayName = "Transaction Numbering Sequence")]
		public virtual String TranNumbering
		{
			get;
			set;
		}
		#endregion
		#region ProformaNumbering
		public abstract class proformaNumbering : PX.Data.BQL.BqlString.Field<proformaNumbering> { }
		/// <summary>
		/// The numbering sequence that is used for pro forma documents generated by the billing process.
		/// </summary>
		/// <value>
		/// This field is a link to a <see cref="Numbering"/> record.
		/// </value>
		[PXDefault("PROFORMA")]
		[PXDBString(10, IsUnicode = true)]
		[PXSelector(typeof(Numbering.numberingID), DescriptionField = typeof(Numbering.descr))]
		[PXUIField(DisplayName = "Pro Forma Numbering Sequence")]
		public virtual String ProformaNumbering
		{
            get;
            set;
		}
		#endregion
		#region ChangeOrderNumbering
		public abstract class changeOrderNumbering : PX.Data.BQL.BqlString.Field<changeOrderNumbering> { }
		/// <summary>
		/// The numbering sequence that is used for change orders.
		/// </summary>
		/// <value>
		/// This field is a link to a <see cref="Numbering"/> record.
		/// </value>
		[PXDefault("CHANGEORD")]
		[PXDBString(10, IsUnicode = true)]
		[PXSelector(typeof(Numbering.numberingID), DescriptionField = typeof(Numbering.descr))]
		[PXUIField(DisplayName = "Change Order Numbering Sequence", FieldClass = PMChangeOrder.FieldClass)]
		public virtual String ChangeOrderNumbering
		{
			get;
			set;
		}
		#endregion
		#region ChangeRequestNumbering
		/// <summary>
		/// The numbering sequence that is used for change requests.
		/// </summary>
		/// <value>
		/// This field is a link to a <see cref="Numbering"/> record.
		/// </value>
		[PXDefault("CHANGERST")]
		[PXDBString(10, IsUnicode = true)]
		[PXSelector(typeof(Numbering.numberingID), DescriptionField = typeof(Numbering.descr))]
		[PXUIField(DisplayName = "Change Request Numbering Sequence", FieldClass = nameof(CS.FeaturesSet.ChangeRequest))]
		public virtual string ChangeRequestNumbering { get; set; }
		public abstract class changeRequestNumbering : PX.Data.BQL.BqlString.Field<changeRequestNumbering> { }
		#endregion
		#region DefaultChangeOrderClassID
		public abstract class defaultChangeOrderClassID : PX.Data.BQL.BqlString.Field<defaultChangeOrderClassID> { }
		/// <summary>
		/// The change order class that is used as the default change order class. 
		/// </summary>
		/// <value>
		/// The value refers to the <see cref="PMChangeOrderClass"/> DAC.
		/// </value>
		[PXForeignReference(typeof(Field<defaultChangeOrderClassID>.IsRelatedTo<PMChangeOrderClass.classID>))]
		[PXDBString(PMChangeOrderClass.classID.Length, IsUnicode = true, InputMask = "")]
		[PXUIField(DisplayName = "Default Change Order Class", Visibility = PXUIVisibility.SelectorVisible, FieldClass = PMChangeOrder.FieldClass)]
		[PXSelector(typeof(Search<PMChangeOrderClass.classID, Where<PMChangeOrderClass.isActive, Equal<True>>>), DescriptionField = typeof(PMChangeOrderClass.description))]
		public virtual String DefaultChangeOrderClassID
		{
			get;
			set;
		}
		#endregion
		#region AutoPost
		public abstract class autoPost : PX.Data.BQL.BqlBool.Field<autoPost> { }
		/// <summary>
		/// Indicates (if set to <see langword="true" />) that transactions will be automatically posted to the general ledger once they are released.
		/// </summary>
		[PXDBBool()]
		[PXDefault(true)]
        [PXUIField(DisplayName = "Automatically Post on Release")]
		public virtual Boolean? AutoPost
		{
			get;
			set;
		}
		#endregion
		#region AutoReleaseAllocation
		public abstract class autoReleaseAllocation : PX.Data.BQL.BqlBool.Field<autoReleaseAllocation> { }
		/// <summary>
		/// Indicates (if set to <see langword="true" />) that the allocation will be automatically released after the allocation process.
		/// </summary>
		[PXDBBool()]
		[PXDefault(false)]
		[PXUIField(DisplayName = "Automatically Release Allocations")]
		public virtual Boolean? AutoReleaseAllocation
		{
			get;
			set;
		}
		#endregion
		#region BatchNumberingID
		public abstract class batchNumberingID : PX.Data.BQL.BqlString.Field<batchNumberingID> { }
		/// <summary>
		/// The numbering sequence that is used for batches generated in the project accounting.
		/// </summary>
		/// <value>
		/// This field is a link to a <see cref="Numbering"/> record.
		/// </value>
		[PXDBString(10, IsUnicode = true)]
		[PXDefault("BATCH")]
		[PXUIField(DisplayName = "Batch Numbering Sequence")]
		[PXSelector(typeof(Numbering.numberingID), DescriptionField = typeof(Numbering.descr))]
		public virtual String BatchNumberingID
		{
			get;
			set;
		}
		#endregion
		#region ExpenseAccountSource
		public abstract class expenseAccountSource : PX.Data.BQL.BqlString.Field<expenseAccountSource> { }
		/// <summary>
		/// The source for the expense account. When a cost transaction is created, the source is used to define the account.
		/// </summary>
		/// <value>
		/// The field can have one of the following values:
		/// <c>"I"</c>: Labor Item,
		/// <c>"P"</c>: Project,
		/// <c>"T"</c>: Task,
		/// <c>"E"</c>: Employee		
		/// </value>
		[PXDBString(1, IsFixed = true)]
		[PMExpenseAccountSource.List()]
		[PXDefault(PMExpenseAccountSource.InventoryItem)]
		[PXUIField(DisplayName = "Expense Account Source", Required = true)]
		public virtual String ExpenseAccountSource
		{
			get;
			set;
		}
		#endregion
		#region ExpenseSubMask
		public abstract class expenseSubMask : PX.Data.BQL.BqlString.Field<expenseSubMask> { }
		/// <summary>
		/// The subaccount mask that defines the rule of choosing segment values for the expense subaccount 
		/// to be used for non-stock items on data entry forms in the Project Accounting module.
		/// To set up the rule, select a segment, press F3, and choose a source of the segment value, which is one of the following options:
		/// </summary>
		/// <value>
		/// The mask may include the following characters:
		/// I: Expense subaccount associated with non-stock item
		/// J: Subaccount associated with project
		/// T: Subaccount associated with project task
		/// E: Subaccount associated with employee
		/// For a segment, the characters designating each option are repeated as many times as there are characters in the segment.
		/// </value>
		[PXDefault]
        [SubAccountMaskAttribute(DisplayName = "Expense Sub. Source")]
		public virtual String ExpenseSubMask
		{
			get;
			set;
		}
		#endregion
        #region ExpenseAccrualAccountSource
        public abstract class expenseAccrualAccountSource : PX.Data.BQL.BqlString.Field<expenseAccrualAccountSource> { }
		/// <summary>
		/// The source of the account for the credit side of the project transaction to be generated on release of the time cards.
		/// </summary>
		/// <value>
		/// The field can have one of the following values:
		/// <c>"I"</c>: Labor Item,
		/// <c>"P"</c>: Project,
		/// <c>"T"</c>: Task,
		/// </value>
		[PXDBString(1, IsFixed = true)]
        [PMExpenseAccountSource.AccrualList()]
        [PXDefault(PMExpenseAccountSource.InventoryItem)]
        [PXUIField(DisplayName = "Expense Accrual Account Source", Required = true)]
        public virtual String ExpenseAccrualAccountSource
        {
			get;
			set;
        }
        #endregion
        #region ExpenseAccrualSubMask
        public abstract class expenseAccrualSubMask : PX.Data.BQL.BqlString.Field<expenseAccrualSubMask> { }
		/// <summary>
		/// The subaccount mask that defines the rule of selecting segment values for the expense accrual subaccount 
		/// to be used for non-stock items on data entry forms in project accounting.
		/// </summary>
		/// <value>
		/// The mask can include the following characters:
		/// I: The expense subaccount associated with the non-stock item
		/// J: The subaccount associated with the project
		/// T: The subaccount associated with the project task
		/// E: The subaccount associated with the employee
		/// For a segment, the characters designating each option are repeated as many times as there are characters in the segment.
		/// </value>
		[PXDefault]
        [SubAccountMaskAttribute(DisplayName = "Expense Accrual Sub. Source")]
        public virtual String ExpenseAccrualSubMask
        {
			get;
			set;
        }
        #endregion
		#region AssignmentMapID
		public abstract class assignmentMapID : PX.Data.BQL.BqlInt.Field<assignmentMapID> { }
		/// <summary>
		/// The map to be used to assign projects to employees for approval.
		/// If no value is specified, the approval is not required. 
		/// </summary>
		/// <value>
		/// The field values refers to the <see cref="EPAssignmentMap"/> DAC.
		/// </value>
		[PXDBInt]
		[PXSelector(
			typeof(Search<
				EPAssignmentMap.assignmentMapID, 
				Where<
					EPAssignmentMap.entityType, Equal<AssignmentMapType.AssignmentMapTypeProject>,
					And<EPAssignmentMap.mapType, NotEqual<EPMapType.assignment>>>>))]
		[PXUIField(DisplayName = "Project Approval Map")]
		public virtual int? AssignmentMapID
		{
			get;
			set;
		}
		#endregion
        #region AssignmentNotificationID
        public abstract class  assignmentNotificationID : PX.Data.BQL.BqlInt.Field<assignmentNotificationID> { }
		/// <summary>
		/// The notification template that the system uses to generate notification emails for employees who approve projects.
		/// An employee receives a notification about pending approval when a project requires approval from this employee.
		/// </summary>
		/// <value>
		/// The field value refers to the <see cref="PX.SM.Notification"/> DAC.
		/// </value>
		[PXDBInt]
        [PXSelector(typeof(Search<PX.SM.Notification.notificationID>))]
        [PXUIField(DisplayName = "Pending Project Approval Notification")]
        public virtual int? AssignmentNotificationID
        {
			get;
			set;
        }
		#endregion
		#region ProformaApprovalMapID
		public abstract class proformaApprovalMapID : PX.Data.BQL.BqlInt.Field<proformaApprovalMapID> { }
		/// <summary>
		/// The map to be used to assign pro forma invoices to employees for approval.
		/// If no value is specified, the approval is not required for these documents.
		/// </summary>
		/// <value>
		/// The value refers to the <see cref="EPAssignmentMap"/> DAC.
		/// </value>
		[PXDBInt]
		[PXSelector(
			typeof(Search<
				EPAssignmentMap.assignmentMapID,
				Where<
					EPAssignmentMap.entityType, Equal<AssignmentMapType.AssignmentMapTypeProforma>,
					And<EPAssignmentMap.mapType, Equal<EPMapType.approval>>>>))]
		[PXUIField(DisplayName = "Pro Forma Approval Map")]
		public virtual int? ProformaApprovalMapID
		{
			get;set;
		}
		#endregion
		#region ProformaApprovalNotificationID
		public abstract class proformaApprovalNotificationID : PX.Data.BQL.BqlInt.Field<proformaApprovalNotificationID> { }
		/// <summary>
		/// The notification template that the system uses to generate notification emails for employees assigned to approve pro forma invoices.
		/// An employee receives a notification about a pending approval when approval of a pro forma invoice is required from this employee.
		/// </summary>
		/// <value>
		/// The value refers to the <see cref="PX.SM.Notification"/> DAC.
		/// </value>
		[PXDBInt]
		[PXSelector(typeof(Search<PX.SM.Notification.notificationID>))]
		[PXUIField(DisplayName = "Pending Pro Forma Approval Notification")]
		public virtual int? ProformaApprovalNotificationID
		{
			get;set;
		}
		#endregion
		#region ProformaAssignmentMapID
		public abstract class proformaAssignmentMapID : PX.Data.BQL.BqlInt.Field<proformaAssignmentMapID> { }
		[Obsolete]
		[PXDBInt]
		[PXSelector(
			typeof(Search<
				EPAssignmentMap.assignmentMapID,
				Where<
					EPAssignmentMap.entityType, Equal<AssignmentMapType.AssignmentMapTypeProforma>,
					And<EPAssignmentMap.mapType, Equal<EPMapType.assignment>>>>))]
		[PXUIField(DisplayName = "Pro Forma Assignment Map", Visible = false)]
		public virtual int? ProformaAssignmentMapID
		{
			get; set;
		}
		#endregion
		#region ProformaAssignmentNotificationID
		public abstract class proformaAssignmentNotificationID : PX.Data.BQL.BqlInt.Field<proformaAssignmentNotificationID> { }
		[Obsolete]
		[PXDBInt]
		[PXSelector(typeof(Search<PX.SM.Notification.notificationID>))]
		[PXUIField(DisplayName = "Pro Forma Assignment Notification", Visible = false)]
		public virtual int? ProformaAssignmentNotificationID
		{
			get; set;
		}
		#endregion
		#region ChangeOrderApprovalMapID
		public abstract class changeOrderApprovalMapID : PX.Data.BQL.BqlInt.Field<changeOrderApprovalMapID> { }
		/// <summary>
		/// The map to be used to assign change orders to employees for approval.
		/// If no value is specified, the approval is not required for change orders.
		/// </summary>
		/// <value>
		/// The value refers to the <see cref="EPAssignmentMap"/> DAC.
		/// </value>
		[PXDBInt]
		[PXSelector(
			typeof(Search<
				EPAssignmentMap.assignmentMapID,
				Where<
					EPAssignmentMap.entityType, Equal<AssignmentMapType.AssignmentMapTypeChangeOrder>,
					And<EPAssignmentMap.mapType, Equal<EPMapType.approval>>>>))]
		[PXUIField(DisplayName = "Change Order Approval Map", FieldClass = PMChangeOrder.FieldClass)]
		public virtual int? ChangeOrderApprovalMapID
		{
			get; set;
		}
		#endregion
		#region ChangeOrderApprovalNotificationID
		public abstract class changeOrderApprovalNotificationID : PX.Data.BQL.BqlInt.Field<changeOrderApprovalNotificationID> { }
		/// <summary>
		/// The notification template that the system uses to generate notification emails for employees assigned to approve change orders.
		/// An employee receives a notification about a pending approval when approval of a change order is required from this employee.
		/// </summary>
		/// <value>
		/// The value refers to the <see cref="PX.SM.Notification"/> DAC.
		/// </value>
		[PXDBInt]
		[PXSelector(typeof(Search<PX.SM.Notification.notificationID>))]
		[PXUIField(DisplayName = "Pending Change Order Approval Notification", FieldClass = PMChangeOrder.FieldClass)]
		public virtual int? ChangeOrderApprovalNotificationID
		{
			get; set;
		}
		#endregion
		#region ChangeRequestApprovalMapID
		public abstract class changeRequestApprovalMapID : PX.Data.BQL.BqlInt.Field<changeRequestApprovalMapID> { }
		/// <summary>
		/// The map to be used to assign change requests to employees for approval.
		/// If no value is specified, the approval is not required for change requests. 
		/// </summary>
		/// <value>
		/// The value refers to the <see cref="EPAssignmentMap"/> DAC.
		/// </value>
		[PXDBInt]
		[PXSelector(
			typeof(Search<
				EPAssignmentMap.assignmentMapID,
				Where<
					EPAssignmentMap.entityType, Equal<AssignmentMapType.AssignmentMapTypeChangeRequest>,
					And<EPAssignmentMap.mapType, Equal<EPMapType.approval>>>>))]
		[PXUIField(DisplayName = "Change Request Approval Map", FieldClass = nameof(CS.FeaturesSet.ChangeRequest))]
		public virtual int? ChangeRequestApprovalMapID
		{
			get; set;
		}
		#endregion
		#region ChangeRequestApprovalNotificationID
		public abstract class changeRequestApprovalNotificationID : PX.Data.BQL.BqlInt.Field<changeRequestApprovalNotificationID> { }
		/// <summary>
		/// The notification template that the system uses to generate notification emails for employees assigned to approve change requests.
		/// An employee receives a notification about a pending approval when approval of a change request is required from this employee.
		/// </summary>
		/// <value>
		/// The value refers to the <see cref="PX.SM.Notification"/> DAC.
		/// </value>
		[PXDBInt]
		[PXSelector(typeof(Search<PX.SM.Notification.notificationID>))]
		[PXUIField(DisplayName = "Pending Change Request Approval Notification", FieldClass = nameof(CS.FeaturesSet.ChangeRequest))]
		public virtual int? ChangeRequestApprovalNotificationID
		{
			get; set;
		}
		#endregion

		#region QuoteTemplateID
		public abstract class quoteTemplateID : PX.Data.BQL.BqlInt.Field<quoteTemplateID> { }
		/// <summary>
		/// The project template that the system uses by default for new project quotes.
		/// </summary>
		[PXUIField(DisplayName = "Default Quote Template", FieldClass = ProjectAttribute.DimensionName)]
		[PXDimensionSelector(ProjectAttribute.DimensionName,
				typeof(Search2<PMProject.contractID,
						LeftJoin<ContractBillingSchedule, On<ContractBillingSchedule.contractID, Equal<PMProject.contractID>>>,
							Where<PMProject.baseType, Equal<CTPRType.projectTemplate>, And<PMProject.isActive, Equal<True>>>>),
				typeof(PMProject.contractCD),
				typeof(PMProject.contractCD),
				typeof(PMProject.description),
				typeof(PMProject.budgetLevel),
				typeof(PMProject.billingID),
				typeof(ContractBillingSchedule.type),
				typeof(PMProject.ownerID),
				DescriptionField = typeof(PMProject.description))]
		[PXDBInt()]
		public virtual Int32? QuoteTemplateID { get; set; }
		#endregion
		#region QuoteApprovalMapID
		public abstract class quoteApprovalMapID : PX.Data.BQL.BqlInt.Field<quoteApprovalMapID> { }
		/// <summary>
		/// The map to be used to assign project quotes to employees for approval.
		/// If no value is specified, the approval is not required for project quotes.
		/// </summary>
		/// <value>
		/// The value refers to the <see cref="EPAssignmentMap"/> DAC.
		/// </value>
		[PXDBInt]
		[PXSelector(
			typeof(Search<
				EPAssignmentMap.assignmentMapID,
				Where<
					EPAssignmentMap.entityType, Equal<AssignmentMapType.AssignmentMapTypeProjectQuotes>,
					And<EPAssignmentMap.mapType, NotEqual<EPMapType.assignment>>>>))]
		[PXUIField(DisplayName = "Quote Approval Map")]
		public virtual int? QuoteApprovalMapID
		{
			get; set;
		}
		#endregion

		
		#region QuoteApprovalNotificationID
		public abstract class quoteApprovalNotificationID : PX.Data.BQL.BqlInt.Field<quoteApprovalNotificationID> { }
		/// <summary>
		/// The notification template that the system uses to generate notification emails for employees assigned to approve project quotes.
		/// An employee receives a notification about a pending approval when approval of a project quote is required from this employee.
		/// </summary>
		/// <value>
		/// The value refers to the <see cref="PX.SM.Notification"/> DAC.
		/// </value>
		[PXDBInt]
		[PXSelector(typeof(Search<PX.SM.Notification.notificationID>))]
		[PXDefault(292, PersistingCheck = PXPersistingCheck.Nothing)]
		[PXUIField(DisplayName = "Pending Quote Approval Notification")]
		public virtual int? QuoteApprovalNotificationID
		{
			get; set;
		}
		#endregion
		#region DefaultPriceMarkupPct
		public abstract class defaultPriceMarkupPct : PX.Data.BQL.BqlDecimal.Field<defaultPriceMarkupPct> { }
		/// <summary>
		/// The default price markup for estimation lines of change requests. 
		/// </summary>
		[PXDBPriceCost()]
		[PXDefault(TypeCode.Decimal, "0.0")]
		[PXUIField(DisplayName = "Default Price Markup, %", FieldClass = nameof(CS.FeaturesSet.ChangeRequest))]
		public virtual Decimal? DefaultPriceMarkupPct
		{
			get;
			set;
		}
		#endregion
		#region CostCommitmentTracking
		public abstract class costCommitmentTracking : PX.Data.BQL.BqlBool.Field<costCommitmentTracking> { }
		[Obsolete]
		[PXDBBool()]
		[PXDefault(false)]
		[PXUIField(DisplayName = "Internal Cost Commitment Tracking")]
		public virtual Boolean? CostCommitmentTracking
		{
			get;
			set;
		}
		#endregion
		#region CalculateProjectSpecificTaxes
		public abstract class calculateProjectSpecificTaxes : PX.Data.BQL.BqlBool.Field<calculateProjectSpecificTaxes> { }
		[PXDBBool()]
		[PXDefault(true)]
		[PXUIField(DisplayName = "Calculate Project-Specific Taxes")]
		public virtual Boolean? CalculateProjectSpecificTaxes
		{
			get;
			set;
		}
		#endregion
		#region CutoffDate
		public abstract class cutoffDate : PX.Data.BQL.BqlString.Field<cutoffDate> { }
		/// <summary>
		/// The cut-off date for billing.
		/// </summary>
		/// <value>
		/// The field can have one of the following values:
		/// <c>"I"</c>: Include, which means to include all unbilled transactions with earlier dates and with the date of the invoice. This is the default value.
		/// <c>"E"</c>: Exclude, which means to include all unbilled transactions with dates that are earlier than the date of the invoice.
		/// </value>
		[PXDBString(1, IsFixed = true)]
		[PMCutOffDate.List()]
		[PXDefault(PMCutOffDate.Included)]
		[PXUIField(DisplayName = "Billing Cut-off Date", Required = true)]
		public virtual String CutoffDate
		{
			get;
			set;
		}
		#endregion
		#region OverLimitErrorLevel
		public abstract class overLimitErrorLevel : PX.Data.BQL.BqlString.Field<overLimitErrorLevel> { }
		/// <summary>
		/// The option that defines how the system validates the limits of the revenue budget of a project when you process pro forma invoices for the project.
		/// </summary>
		/// <value>
		/// The field can have one of the following values:
		/// <c>"W"</c>: Warning, whitch is the default value.
		/// <c>"E"</c>: Error.
		/// </value>
		[PXDBString(1)]
		[PXUIField(DisplayName = "Validate T&M Revenue Budget Limits")]
		[OverLimitValidationOption.List]
		[PXDefault(OverLimitValidationOption.Error)]
		public virtual String OverLimitErrorLevel
		{
			get;
			set;
		}
		#endregion
		#region CostBudgetUpdateMode
		public abstract class costBudgetUpdateMode : PX.Data.BQL.BqlString.Field<costBudgetUpdateMode> { }
		/// <summary>
		/// The way the system updates the cost budget of projects when a project transaction is posted, a change order line is released, a commitment line is saved, a pro forma invoice line is saved, an accounts receivable invoice line is saved, or a new change request line is saved or linked to a change order.
		/// </summary>
		/// <value>
		/// The field can have one of the following values:
		/// <c>"D"</c>: Detailed, which is the default value.
		/// <c>"S"</c>: Summary.
		/// </value>
		[PXDBString(1)]
		[PXUIField(DisplayName = "Cost Budget Update")]
		[CostBudgetUpdateModes.List]
		[PXDefault(CostBudgetUpdateModes.Detailed)]
		public virtual String CostBudgetUpdateMode
		{
			get;
			set;
		}
        #endregion
		#region BudgetControl
		public abstract class budgetControl : PX.Data.BQL.BqlString.Field<budgetControl> { }
		/// <summary>
		/// The way the system controls the project budget on document entry. 
		/// </summary>
		/// <value>
		/// The field can have one of the following values:
		/// <c>"N"</c>: Do Not Control, which is the default value.
		/// <c>"W"</c>: Show a Warning.
		/// </value>
		[PXDBString(1)]
		[PXUIField(DisplayName = "Budget Control")]
		[BudgetControlOption.List]
		[PXDefault(BudgetControlOption.Nothing)]
		public virtual string BudgetControl
		{
			get;
			set;
		}
		#endregion
        #region RevenueBudgetUpdateMode
        public abstract class revenueBudgetUpdateMode : PX.Data.BQL.BqlString.Field<revenueBudgetUpdateMode> { }
		/// <summary>
		/// The way the system updates the revenue budget of projects when a project transaction is posted, a change order line is released, a commitment line is saved, a pro forma invoice line is saved, an accounts receivable invoice line is saved, or a new change request line is saved or linked to a change order.
		/// </summary>
		/// <value>
		/// The field can have one of the following values:
		/// <c>"D"</c>: Detailed, which is the default value.
		/// <c>"S"</c>: Summary.
		/// </value>
		[PXDBString(1)]
        [PXUIField(DisplayName = "Revenue Budget Update")]
        [CostBudgetUpdateModes.List]
        [PXDefault(CostBudgetUpdateModes.Summary)]
        public virtual String RevenueBudgetUpdateMode
        {
            get;
            set;
        }
        #endregion
        #region VisibleInGL
        public abstract class visibleInGL : PX.Data.BQL.BqlBool.Field<visibleInGL> { }
		/// <summary>
		/// The visibility of the project in the general ledger.
		/// </summary>
		[PXDBBool()]
		[PXDefault(true)]
		[PXUIField(DisplayName = "GL")]
		public virtual Boolean? VisibleInGL
		{
			get;
			set;
		}
		#endregion
		#region VisibleInAP
		public abstract class visibleInAP : PX.Data.BQL.BqlBool.Field<visibleInAP> { }
		/// <summary>
		/// The visibility of the project in accounts payable.
		/// </summary>
		[PXDBBool()]
		[PXDefault(true)]
		[PXUIField(DisplayName = "AP")]
		public virtual Boolean? VisibleInAP
		{
			get;
			set;
		}
		#endregion
		#region VisibleInAR
		public abstract class visibleInAR : PX.Data.BQL.BqlBool.Field<visibleInAR> { }
		/// <summary>
		// The visibility of the project in accounts receivable.
		/// </summary>
		[PXDBBool()]
		[PXDefault(true)]
		[PXUIField(DisplayName = "AR")]
		public virtual Boolean? VisibleInAR
		{
			get;
			set;
		}
		#endregion
		#region VisibleInSO
		public abstract class visibleInSO : PX.Data.BQL.BqlBool.Field<visibleInSO> { }
		/// <summary>
		/// The visibility of the project in sales orders.
		/// </summary>
		[PXDBBool()]
		[PXDefault(true)]
		[PXUIField(DisplayName = "SO")]
		public virtual Boolean? VisibleInSO
		{
			get;
			set;
		}
		#endregion
		#region VisibleInPO
		public abstract class visibleInPO : PX.Data.BQL.BqlBool.Field<visibleInPO> { }
		/// <summary>
		/// The visibility of the project in purchase orders.
		/// </summary>
		[PXDBBool()]
		[PXDefault(true)]
		[PXUIField(DisplayName = "PO")]
		public virtual Boolean? VisibleInPO
		{
			get;
			set;
		}
		#endregion
		
		#region VisibleInTA
		public abstract class visibleInTA : PX.Data.BQL.BqlBool.Field<visibleInTA> { }
		/// <summary>
		/// The visibility of the project in time entries.
		/// </summary>
		[PXDBBool()]
		[PXDefault(true)]
		[PXUIField(DisplayName = "Time Entries")]
		public virtual Boolean? VisibleInTA
		{
			get;
			set;
		}
		#endregion
		#region VisibleInEA
		public abstract class visibleInEA : PX.Data.BQL.BqlBool.Field<visibleInEA> { }
		/// <summary>
		/// The visibility of the project in expenses.
		/// </summary>
		[PXDBBool()]
		[PXDefault(true)]
		[PXUIField(DisplayName = "Expenses")]
		public virtual Boolean? VisibleInEA
		{
			get;
			set;
		}
		#endregion
		#region VisibleInIN
		public abstract class visibleInIN : PX.Data.BQL.BqlBool.Field<visibleInIN> { }
		/// <summary>
		/// The visibility of the project in inventory.
		/// </summary>
		[PXDBBool()]
		[PXDefault(true)]
		[PXUIField(DisplayName = "IN")]
		public virtual Boolean? VisibleInIN
		{
			get;
			set;
		}
		#endregion
		#region VisibleInCA
		public abstract class visibleInCA : PX.Data.BQL.BqlBool.Field<visibleInCA> { }
		/// <summary>
		/// The visibility of the project in cash management.
		/// </summary>
		[PXDBBool()]
		[PXDefault(true)]
		[PXUIField(DisplayName = "CA")]
		public virtual Boolean? VisibleInCA
		{
			get;
			set;
		}
		#endregion
		#region VisibleInCR
		public abstract class visibleInCR : PX.Data.BQL.BqlBool.Field<visibleInCR> { }
		/// <summary>
		/// The visibility of the project in CRM.
		/// </summary>
		[PXDBBool()]
		[PXDefault(true)]
		[PXUIField(DisplayName = "CRM")]
		public virtual Boolean? VisibleInCR
		{
			get;
			set;
		}
		#endregion
		#region RestrictProjectSelect
		public abstract class restrictProjectSelect : PX.Data.BQL.BqlString.Field<restrictProjectSelect> { }
		/// <summary>
		/// The restrictions for the projects.
		/// </summary>
		/// <value>
		/// The field can have one of the following values:
		/// <c>"C"</c>: Customer Projects, which is the default value.
		/// <c>"A"</c>: All Projects.
		/// </value>
		[PMRestrictOption.List]
		[PXDBString(1)]
		[PXDefault(PMRestrictOption.CustomerProjects)]
		[PXUIField(DisplayName = "Restrict Project Selection")]
		public virtual String RestrictProjectSelect
		{
			get;
			set;
		}
		#endregion

		#region QuoteNumberingID
		public abstract class quoteNumberingID : PX.Data.BQL.BqlString.Field<quoteNumberingID> { }
		/// <summary>
		/// Migration mode, which is used to import data from external systems.
		/// </summary>
		/// <value>
		/// If the value is <see langword="true" />, pro forma documents can be imported into the system.
		/// </value>
		[PXDBString(10, IsUnicode = true)]
		[PXDefault("PMQUOTE")]
		[PXUIField(DisplayName = "Quote Numbering Sequence")]
		[PXSelector(typeof(Numbering.numberingID), DescriptionField = typeof(Numbering.descr))]
		public virtual String QuoteNumberingID { get; set; }
		#endregion
		#region AutoCompleteRevenueBudget
		public abstract class autoCompleteRevenueBudget : PX.Data.BQL.BqlBool.Field<autoCompleteRevenueBudget> { }

		[Obsolete]
		[PXDBBool()]
		[PXDefault(false)]
		[PXUIField(DisplayName = "Automatically Adjust Unbilled Revenue Based on the Completed Cost", Visible = false)]
		public virtual Boolean? AutoCompleteRevenueBudget
		{
			get;
			set;
		}
		#endregion
		#region MigrationMode
		public abstract class migrationMode : PX.Data.BQL.BqlBool.Field<migrationMode> { }

		/// <summary>
		/// Migration mode, which is used to import data from external systems.
		/// </summary>
		/// <value>
		/// If the value is <see langword="true" />, pro forma documents can be imported into the system.
		/// </value>
		[PXDBBool()]
		[PXDefault(false)]
		[PXUIField(DisplayName = "Migration Mode", Visible = false)]
		public virtual Boolean? MigrationMode
		{
			get;
			set;
		}
		#endregion
		#region StockInitRequired
		public abstract class stockInitRequired : PX.Data.BQL.BqlBool.Field<stockInitRequired> { }

		/// <summary>
		/// The stock initialization flag.
		/// </summary>
		[PXDBBool()]
		[PXDefault(false)]
		public virtual Boolean? StockInitRequired
		{
			get;
			set;
		}
		#endregion

		#region CostProjectionApprovalMapID
		public abstract class costProjectionApprovalMapID : PX.Data.BQL.BqlInt.Field<costProjectionApprovalMapID> { }
		/// <summary>
		/// The map to be used to assign cost projection revisions to employees for approval. If no value is specified for this field, approval is not required for cost projection revisions created for a project. 
		/// </summary>
		/// <value>
		/// The value refers to the <see cref="EPAssignmentMap"/> DAC.
		/// </value>
		[PXDBInt]
		[PXSelector(
			typeof(Search<
				EPAssignmentMap.assignmentMapID,
				Where<
					EPAssignmentMap.entityType, Equal<AssignmentMapTypeCostProjection>,
					And<EPAssignmentMap.mapType, Equal<EPMapType.approval>>>>))]
		[PXUIField(DisplayName = "Cost Projection Approval Map")]
		public virtual int? CostProjectionApprovalMapID
		{
			get; set;
		}
		#endregion

		#region CostProjectionApprovalNotificationID
		public abstract class costProjectionApprovalNotificationID : PX.Data.BQL.BqlInt.Field<costProjectionApprovalNotificationID> { }
		/// <summary>
		/// The notification template that the system uses to generate notification emails for employees assigned to approve cost projection revisions for project quotes. With a notification template specified, an employee receives a notification about a pending approval when the approval of a cost projection is required from this employee.
		/// </summary>
		/// <value>
		/// The values refers to the <see cref="PX.SM.Notification"/> DAC.
		/// </value>
		[PXDBInt]
		[PXSelector(typeof(Search<PX.SM.Notification.notificationID>))]
		[PXUIField(DisplayName = "Cost Projection Approval Notification")]
		public virtual int? CostProjectionApprovalNotificationID
		{
			get; set;
		}
		#endregion

		#region UnbilledRemainderAccountID
		public abstract class unbilledRemainderAccountID : PX.Data.BQL.BqlInt.Field<unbilledRemainderAccountID> { }
		/// <summary>
		/// The debit account of project transactions for unbilled remainders.
		/// </summary>
		/// <value>
		/// The value refers to the <see cref="GL.Account"/> DAC.
		/// </value>
		[GL.Account(null, typeof(Search<GL.Account.accountID, Where<GL.Account.accountGroupID, IsNotNull>>),
			DisplayName = "Debit Account", AvoidControlAccounts = true)]
		[PXDefault(PersistingCheck = PXPersistingCheck.Nothing)]
		public virtual int? UnbilledRemainderAccountID
		{
			get;
			set;
		}
		#endregion
		#region UnbilledRemainderSubID
		public abstract class unbilledRemainderSubID : PX.Data.BQL.BqlInt.Field<unbilledRemainderSubID> { }
		/// <summary>
		/// The debit subaccount of project transactions for unbilled remainders.
		/// </summary>
		/// <value>
		/// The value refers to the <see cref="GL.SubAccount"/> DAC.
		/// </value>
		[GL.SubAccount(typeof(PMSetup.unbilledRemainderAccountID), DisplayName = "Debit Subaccount")]
		[PXDefault(PersistingCheck = PXPersistingCheck.Nothing)]
		public virtual int? UnbilledRemainderSubID
		{
			get;
			set;
		}
		#endregion
		#region UnbilledRemainderOffsetAccountID
		public abstract class unbilledRemainderOffsetAccountID : PX.Data.BQL.BqlInt.Field<unbilledRemainderOffsetAccountID> { }
		/// <summary>
		/// The credit account of project transactions for unbilled remainders.
		/// </summary>
		/// <value>
		/// The value refers to the <see cref="GL.Account"/> DAC.
		/// </value>
		[GL.Account(null, typeof(Search<GL.Account.accountID>),
			DisplayName = "Credit Account", AvoidControlAccounts = true)]
		[PXDefault(PersistingCheck = PXPersistingCheck.Nothing)]
		public virtual int? UnbilledRemainderOffsetAccountID
		{
			get;
			set;
		}
		#endregion
		#region UnbilledRemainderOffsetSubID
		public abstract class unbilledRemainderOffsetSubID : PX.Data.BQL.BqlInt.Field<unbilledRemainderOffsetSubID> { }
		/// <summary>
		/// The credit subaccount of project transactions for unbilled remainders.
		/// </summary>
		/// <value>
		/// The value refers to the <see cref="GL.SubAccount"/> DAC.
		/// </value>
		[GL.SubAccount(typeof(PMSetup.unbilledRemainderOffsetAccountID), DisplayName = "Credit Subaccount")]
		[PXDefault(PersistingCheck = PXPersistingCheck.Nothing)]
		public virtual int? UnbilledRemainderOffsetSubID
		{
			get;
			set;
		}
		#endregion
		#region LargeProjectTemplateSize 
		public abstract class largeProjectTemplateSize : PX.Data.BQL.BqlInt.Field<largeProjectTemplateSize> { }
		/// <summary>
		/// The threshold for large project templates.
		/// </summary>
		[PXDBInt]
		[PXDefault(PersistingCheck = PXPersistingCheck.Nothing)]
		public virtual int? LargeProjectTemplateSize
		{
			get;
			set;
		}
		#endregion

		#region DropshipExpenseAccountSource
		public abstract class dropshipExpenseAccountSource : PX.Data.BQL.BqlString.Field<dropshipExpenseAccountSource> { }
		/// <summary>
		/// The source of the expense account to be used in the project drop-ship order.
		/// </summary>
		/// <value>
		/// The field can have one of the following values:
		/// <c>"O"</c>: Posting Class or Item, which is the default value.
		/// <c>"P"</c>: Project.
		/// <c>"T"</c>: Task.
		/// </value>
		[PXDBString(1, IsFixed = true)]
		[DropshipExpenseAccountSourceOption.List()]
		[PXDefault(DropshipExpenseAccountSourceOption.PostingClassOrItem)]
		[PXUIField(DisplayName = "Use Expense Account From", Required = true)]
		public virtual String DropshipExpenseAccountSource
		{
			get;
			set;
		}
		#endregion
		#region DropshipExpenseSubMask
		public abstract class dropshipExpenseSubMask : PX.Data.BQL.BqlString.Field<dropshipExpenseSubMask> { }
		/// <summary>
		/// The subaccount mask for items that are used in the project drop-ship orders.
		/// </summary>
		/// <value>
		/// The field can have one of the following values:
		/// <c>"I"</c>: Inventory item, which is the default value.
		/// <c>"P"</c>: Posting class.
		/// <c>"J"</c>: Project.
		/// <c>"T"</c>: Task.
		/// </value>
		[PXDefault]
		[DropshipExpenseSubAccountMaskAttribute(DisplayName = "Combine Expense Sub. From")]
		public virtual String DropshipExpenseSubMask
		{
			get;
			set;
		}
		#endregion
		#region DropshipReceiptProcessing
		public abstract class dropshipReceiptProcessing : PX.Data.BQL.BqlString.Field<dropshipReceiptProcessing> { }
		/// <summary>
		/// The setting that defines whether a receipt will be generated for a project drop shipment. 
		/// </summary>
		/// <value>
		/// The field can have one of the following values:
		/// <c>"R"</c>: Generate Receipt, which is the default value.
		/// <c>"S"</c>: Skip Receipt Generation.
		/// </value>
		[DropshipReceiptProcessingOption.List]
		[PXDBString(1)]
		[PXDefault(DropshipReceiptProcessingOption.GenerateReceipt)]
		[PXUIField(DisplayName = "Drop-Ship Receipt Processing")]
		public virtual String DropshipReceiptProcessing
		{
			get;
			set;
		}
		#endregion
		#region DropshipExpenseRecording
		public abstract class dropshipExpenseRecording : PX.Data.BQL.BqlString.Field<dropshipExpenseRecording> { }
		/// <summary>
		/// The setting that defines when the expense transaction should be recorded for a project drop shipment.
		/// </summary>
		/// <value>
		/// The field can have one of the following values:
		/// <c>"B"</c>: On Bill Release, which is the default value.
		/// <c>"R"</c>: On Receipt Release.
		/// </value>
		[DropshipExpenseRecordingOption.List]
		[PXDBString(1)]
		[PXDefault(DropshipExpenseRecordingOption.OnBillRelease)]
		[PXUIEnabled(typeof(Where<PMSetup.dropshipReceiptProcessing, Equal<DropshipReceiptProcessingOption.generateReceipt>>))]
		[PXUIField(DisplayName = "Record Drop-Ship Expenses")]
		public virtual String DropshipExpenseRecording
		{
			get;
			set;
		}
		#endregion

		#region System Columns
		#region tstamp
		public abstract class Tstamp : PX.Data.BQL.BqlByteArray.Field<Tstamp> { }
		protected Byte[] _tstamp;
		[PXDBTimestamp()]
		public virtual Byte[] tstamp
		{
			get
			{
				return this._tstamp;
			}
			set
			{
				this._tstamp = value;
			}
		}
		#endregion
		#region CreatedByID
		public abstract class createdByID : PX.Data.BQL.BqlGuid.Field<createdByID> { }
		protected Guid? _CreatedByID;
		[PXDBCreatedByID]
		public virtual Guid? CreatedByID
		{
			get
			{
				return this._CreatedByID;
			}
			set
			{
				this._CreatedByID = value;
			}
		}
		#endregion
		#region CreatedByScreenID
		public abstract class createdByScreenID : PX.Data.BQL.BqlString.Field<createdByScreenID> { }
		protected String _CreatedByScreenID;
		[PXDBCreatedByScreenID()]
		public virtual String CreatedByScreenID
		{
			get
			{
				return this._CreatedByScreenID;
			}
			set
			{
				this._CreatedByScreenID = value;
			}
		}
		#endregion
		#region CreatedDateTime
		public abstract class createdDateTime : PX.Data.BQL.BqlDateTime.Field<createdDateTime> { }
		protected DateTime? _CreatedDateTime;
		[PXUIField(DisplayName = PXDBLastModifiedByIDAttribute.DisplayFieldNames.CreatedDateTime, Enabled = false, IsReadOnly = true)]
		[PXDBCreatedDateTime]
		public virtual DateTime? CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				this._CreatedDateTime = value;
			}
		}
		#endregion
		#region LastModifiedByID
		public abstract class lastModifiedByID : PX.Data.BQL.BqlGuid.Field<lastModifiedByID> { }
		protected Guid? _LastModifiedByID;
		[PXDBLastModifiedByID]
		public virtual Guid? LastModifiedByID
		{
			get
			{
				return this._LastModifiedByID;
			}
			set
			{
				this._LastModifiedByID = value;
			}
		}
		#endregion
		#region LastModifiedByScreenID
		public abstract class lastModifiedByScreenID : PX.Data.BQL.BqlString.Field<lastModifiedByScreenID> { }
		protected String _LastModifiedByScreenID;
		[PXDBLastModifiedByScreenID()]
		public virtual String LastModifiedByScreenID
		{
			get
			{
				return this._LastModifiedByScreenID;
			}
			set
			{
				this._LastModifiedByScreenID = value;
			}
		}
		#endregion
		#region LastModifiedDateTime
		public abstract class lastModifiedDateTime : PX.Data.BQL.BqlDateTime.Field<lastModifiedDateTime> { }
		protected DateTime? _LastModifiedDateTime;
		[PXUIField(DisplayName = PXDBLastModifiedByIDAttribute.DisplayFieldNames.LastModifiedDateTime, Enabled = false, IsReadOnly = true)]
		[PXDBLastModifiedDateTime]
		public virtual DateTime? LastModifiedDateTime
		{
			get
			{
				return this._LastModifiedDateTime;
			}
			set
			{
				this._LastModifiedDateTime = value;
			}
		}
		#endregion
		#endregion

		public class AssignmentMapTypeCostProjection : PX.Data.BQL.BqlString.Constant<AssignmentMapTypeCostProjection>
		{
			public AssignmentMapTypeCostProjection() : base(typeof(PMCostProjection).FullName) { }
		}
	}

	[PXHidden]
	[PXBreakInheritance]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	public class PMSetupProjectApproval : PMSetup, IAssignedMap
	{
		int? IAssignedMap.AssignmentMapID
		{
			get
			{
				return this.AssignmentMapID;
			}
			set
			{
				this.AssignmentMapID = value;
			}
		}

		int? IAssignedMap.AssignmentNotificationID
		{
			get
			{
				return this.AssignmentNotificationID;
			}
			set
			{
				this.AssignmentNotificationID = value;
			}
		}

		bool? IAssignedMap.IsActive
		{
			get
			{
				return this.IsActive;
			}
		}
	}

	[PXHidden]
	[PXBreakInheritance]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	public class PMSetupProformaApproval : PMSetup, IAssignedMap
	{
		int? IAssignedMap.AssignmentMapID
		{
			get
			{
				return this.ProformaApprovalMapID;
			}
			set
			{
				this.ProformaApprovalMapID = value;
			}
		}

		int? IAssignedMap.AssignmentNotificationID
		{
			get
			{
				return this.ProformaApprovalNotificationID;
			}
			set
			{
				this.ProformaApprovalNotificationID = value;
			}
		}

		bool? IAssignedMap.IsActive
		{
			get
			{
				return this.ProformaApprovalMapID.HasValue;
			}
		}
	}

	[PXHidden]
	[PXBreakInheritance]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	public class PMSetupCostProjectionApproval : PMSetup, IAssignedMap
	{
		int? IAssignedMap.AssignmentMapID
		{
			get
			{
				return this.CostProjectionApprovalMapID;
			}
			set
			{
				this.CostProjectionApprovalMapID = value;
			}
		}

		int? IAssignedMap.AssignmentNotificationID
		{
			get
			{
				return this.CostProjectionApprovalNotificationID;
			}
			set
			{
				this.CostProjectionApprovalNotificationID = value;
			}
		}

		bool? IAssignedMap.IsActive
		{
			get
			{
				return this.CostProjectionApprovalMapID.HasValue;
			}
		}
	}

	[PXHidden]
	[PXBreakInheritance]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	public class PMSetupChangeRequestApproval : PMSetup, IAssignedMap
	{
		int? IAssignedMap.AssignmentMapID
		{
			get
			{
				return this.ChangeRequestApprovalMapID;
			}
			set
			{
				this.ChangeRequestApprovalMapID = value;
			}
		}

		int? IAssignedMap.AssignmentNotificationID
		{
			get
			{
				return this.ChangeRequestApprovalNotificationID;
			}
			set
			{
				this.ChangeRequestApprovalNotificationID = value;
			}
		}

		bool? IAssignedMap.IsActive
		{
			get
			{
				return this.ChangeRequestApprovalMapID.HasValue;
			}
		}
	}

	[PXHidden]
	[PXBreakInheritance]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	public class PMSetupChangeOrderApproval : PMSetup, IAssignedMap
	{
		int? IAssignedMap.AssignmentMapID
		{
			get
			{
				return this.ChangeOrderApprovalMapID;
			}
			set
			{
				this.ChangeOrderApprovalMapID = value;
			}
		}

		int? IAssignedMap.AssignmentNotificationID
		{
			get
			{
				return this.ChangeOrderApprovalNotificationID;
			}
			set
			{
				this.ChangeOrderApprovalNotificationID = value;
			}
		}

		bool? IAssignedMap.IsActive
		{
			get
			{
				return this.ChangeOrderApprovalMapID.HasValue;
			}
		}
	}

	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	public static class PMExpenseAccountSource
	{
		public class ListAttribute : PXStringListAttribute
		{
			public ListAttribute() : base(
				new[]
				{
					Pair(InventoryItem, Messages.AccountSource_LaborItem),
					Pair(Project, Messages.AccountSource_Project),
					Pair(Task, Messages.AccountSource_Task),
					Pair(Employee, Messages.AccountSource_Employee),
				}) {}
		}

		public class AccrualListAttribute : PXStringListAttribute
		{
			public AccrualListAttribute() : base(
				new[]
				{
					Pair(InventoryItem, Messages.AccountSource_LaborItem_Accrual),
					Pair(Project, Messages.AccountSource_ProjectAccrual),
					Pair(Task, Messages.AccountSource_Task_Accrual),
				}) {}
		}

		public const string Project = "P";
		public const string Task = "T";
		public const string InventoryItem = "I";
		public const string Employee = "E";
	}

	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	public static class PMCutOffDate
	{
		public class ListAttribute : PXStringListAttribute
		{
			public ListAttribute() : base(
				new[]
				{
					Pair(Included, Messages.Included),
					Pair(Excluded, Messages.Excluded),
				}) {}
		}

		public const string Included = "I";
		public const string Excluded = "E";
	}

	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	public static class PMRestrictOption
	{
		public class ListAttribute : PXStringListAttribute
		{
			public ListAttribute()
				: base(
				new string[] { AllProjects, CustomerProjects },
				new string[] { Messages.PMRestrict_AllProjects, Messages.PMRestrict_CustomerProjects })
			{; }
		}

		public const string AllProjects = "A";
		public const string CustomerProjects = "C";

		public class allProjects : PX.Data.BQL.BqlString.Constant<allProjects>
		{
			public allProjects() : base(AllProjects) {; }
		}

		public class customerProjects : PX.Data.BQL.BqlString.Constant<customerProjects>
		{
			public customerProjects() : base(CustomerProjects) {; }
		}

	}

	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	public static class OverLimitValidationOption
	{
		public class ListAttribute : PXStringListAttribute
		{
			public ListAttribute()
				: base(
				new string[] { Error, Warning },
				new string[] { Messages.Validation_Error, Messages.Validation_Warning })
			{; }
		}

		public const string Error = "E";
		public const string Warning = "W";
		
	}

	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	public static class CostBudgetUpdateModes
	{
		public class ListAttribute : PXStringListAttribute
		{
			public ListAttribute()
				: base(
				new string[] { Detailed, Summary },
				new string[] { Messages.BudgetUpdate_Detailed, Messages.BudgetUpdate_Summary })
			{; }
		}

		public const string Detailed = "D";
		public const string Summary = "S";
		
	}

	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	public static class DropshipExpenseAccountSourceOption
	{
		public class ListAttribute : PXStringListAttribute
		{
			public ListAttribute() : base(
				new[]
				{
					Pair(PostingClassOrItem, Messages.AccountSource_PostingClassItem),
					Pair(Project, Messages.AccountSource_Project),
					Pair(Task, Messages.AccountSource_Task),
				})
			{ }
		}

		public const string PostingClassOrItem = "O";
		public const string Project = "P";
		public const string Task = "T";
	}

	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	public static class DropshipReceiptProcessingOption
	{
		public class ListAttribute : PXStringListAttribute
		{
			public ListAttribute()
				: base(
				new string[] { GenerateReceipt, SkipReceipt },
				new string[] { Messages.DropshipGenerateReceipt, Messages.DropshipSkipReceipt })
			{; }
		}

		public const string GenerateReceipt = "R";
		public const string SkipReceipt = "S";

		public class generateReceipt : PX.Data.BQL.BqlString.Constant<generateReceipt>
		{
			public generateReceipt() : base(GenerateReceipt) {; }
		}

		public class skipReceipt : PX.Data.BQL.BqlString.Constant<skipReceipt>
		{
			public skipReceipt() : base(SkipReceipt) {; }
		}

	}

	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	public static class DropshipExpenseRecordingOption
	{
		public class ListAttribute : PXStringListAttribute
		{
			public ListAttribute()
				: base(
				new string[] { OnBillRelease, OnReceiptRelease },
				new string[] { Messages.DropshipRecordExpenseOnBillRelease, Messages.DropshipRecordExpenseOnReceiptRelease })
			{; }
		}

		public const string OnBillRelease = "B";
		public const string OnReceiptRelease = "R";

		public class onBillRelease : PX.Data.BQL.BqlString.Constant<onBillRelease>
		{
			public onBillRelease() : base(OnBillRelease) {; }
		}

		public class onReceiptRelease : PX.Data.BQL.BqlString.Constant<onReceiptRelease>
		{
			public onReceiptRelease() : base(OnReceiptRelease) {; }
		}

	}
}
